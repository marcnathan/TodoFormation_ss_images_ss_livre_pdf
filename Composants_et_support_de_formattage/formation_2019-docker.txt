> Notes
	- 
	- 
	- 
	- 
	- 


> docker
	- ressources
		- net
			- https://en.wikipedia.org/wiki/Docker_(software)
			- https://docs.docker.com/engine/docker-overview/
			- https://docs.docker.com/engine/installation/#supported-platforms
			- https://docs.docker.com/engine/installation/linux/docker-ee/ubuntu/
			- https://docs.docker.com/engine/installation/linux/docker-ce/ubuntu/#install-using-the-repository
			- https://docs.docker.com/engine/installation/linux/linux-postinstall/#manage-docker-as-a-non-root-user
			- https://docs.docker.com/get-started/part4/#prerequisites
			- https://docs.docker.com/engine/userguide/
			- https://opensource.com/business/14/7/guide-docker
			- https://buddy.works/guides/5-ways-to-deploy-php-applications
		- livre
			- 
	- lien indexe complet
		- 
	- procédées essentiels
		- installation
			- Docker is a tool that can package an application and its dependencies in a virtual container that can run on any Linux server. 
			- This helps enable flexibility and portability on where the application can run, whether on premises, public cloud, private cloud, bare metal, etc.[14]
			- Docker provides a layer of abstraction and automation of operating-system-level virtualization on Windows and Linux.
			- Docker containers are so lightweight, a single server or virtual machine can run several containers simultaneously that run processes in isolation.
			- Using Docker to create and manage containers may simplify the creation of highly distributed systems by allowing multiple applications, worker tasks and other processes to run autonomously on a single physical machine or across multiple virtual machines. This allows the deployment of nodes to be performed as the resources become available or when more nodes are needed, allowing a platform as a service (PaaS)-style of deployment and scaling for systems like Apache Cassandra, MongoDB or Riak. Docker also simplifies the creation and operation of task or workload queues and other distributed systems.
		- paramétrage
			- fichier  de configuration
				- 
		- commandes
			- docker build -t friendlyname .  # Create image using this directory's Dockerfile
			- docker run -p 4000:80 friendlyname  # Run "friendlyname" mapping port 4000 to 80
			- docker run -d -p 4000:80 friendlyname         # Same thing, but in detached mode
			- docker container ls                                # List all running containers
			- docker container ls -a             # List all containers, even those not running
			- docker container stop <hash>           # Gracefully stop the specified container
			- docker container kill <hash>         # Force shutdown of the specified container
			- docker container rm <hash>        # Remove specified container from this machine
			- docker container rm $(docker container ls -a -q)         # Remove all containers
			- docker image ls -a                             # List all images on this machine
			- docker image rm <image id>            # Remove specified image from this machine
			- docker image rm $(docker image ls -a -q)   # Remove all images from this machine
			- docker login             # Log in this CLI session using your Docker credentials
			- docker tag <image> username/repository:tag  # Tag <image> for upload to registry
			- docker push username/repository:tag            # Upload tagged image to registry
			- docker run username/repository:tag                   # Run image from a registry
			
			- docker stack ls                                            # List stacks or apps
			- docker stack deploy -c <composefile> <appname>  # Run the specified Compose file
			- docker service ls                 # List running services associated with an app
			- docker service ps <service>                  # List tasks associated with an app
			- docker inspect <task or container>                   # Inspect task or container
			- docker container ls -q                                      # List container IDs
			- docker stack rm <appname>                             # Tear down an application
			
			- 
			
		- outils
			- Docker Compose
				- Compose is a tool for defining and running multi-container Docker applications.[60] It uses YAML files to configure the application's services and performs the creation and start-up process of all the containers with a single command.
			- Docker Swarm
				- Docker Swarm provides native clustering functionality for Docker containers, which turns a group of Docker engines into a single, virtual Docker engine.[61]
			
