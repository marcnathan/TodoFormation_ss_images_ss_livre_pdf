> Multiton
	- 



// ------------------------------------------------
http://designpatternsphp.readthedocs.io/en/latest/Creational/Multiton/README.html



1.4. Multiton

THIS IS CONSIDERED TO BE AN ANTI-PATTERN! FOR BETTER TESTABILITY AND MAINTAINABILITY USE DEPENDENCY INJECTION!
1.4.1. Purpose

To have only a list of named instances that are used, like a singleton but with n instances.
1.4.2. Examples

    2 DB Connectors, e.g. one for MySQL, the other for SQLite
    multiple Loggers (one for debug messages, one for errors)

1.4.3. UML Diagram
Alt Multiton UML Diagram
1.4.4. Code

You can also find these code on GitHub

Multiton.php

<?php

namespace DesignPatterns\Creational\Multiton;

/**
 * class Multiton.
 */
class Multiton
{
    /**
     * the first instance.
     */
    const INSTANCE_1 = '1';

    /**
     * the second instance.
     */
    const INSTANCE_2 = '2';

    /**
     * holds the named instances.
     *
     * @var array
     */
    private static $instances = array();

    /**
     * should not be called from outside: private!
     */
    private function __construct()
    {
    }

    /**
     * gets the instance with the given name, e.g. Multiton::INSTANCE_1
     * uses lazy initialization.
     *
     * @param string $instanceName
     *
     * @return Multiton
     */
    public static function getInstance($instanceName)
    {
        if (!array_key_exists($instanceName, self::$instances)) {
            self::$instances[$instanceName] = new self();
        }

        return self::$instances[$instanceName];
    }

    /**
     * prevent instance from being cloned.
     *
     * @return void
     */
    private function __clone()
    {
    }

    /**
     * prevent instance from being unserialized.
     *
     * @return void
     */
    private function __wakeup()
    {
    }
}

1.4.5. Test









	
	
	