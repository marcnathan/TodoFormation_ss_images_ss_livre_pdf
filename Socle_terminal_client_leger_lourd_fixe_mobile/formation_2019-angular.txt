> notes
	- Spécialisation dans la création de user interfases
	- angular est plus spécialisé dans le traitement des données
	- jquery est plus spacialisé dans l'animation
	- 
	- 
	-
	- 


> Angular* 
	- https://learnxinyminutes.com/docs/angularjs/
		- // AngularJS is a JavaScript framework. It is a library written in JavaScript.
			// AngularJS is distributed as a JavaScript file, and can be added to a web page with a script tag:
			// <script src="http://ajax.googleapis.com/ajax/libs/angularjs/1.3.14/angular.min.js"></script>

			///////////////////////////////////
			// AngularJS Extends HTML

			//AngularJS extends HTML with ng-directives.
			//The ng-app directive defines an AngularJS application.
			//The ng-model directive binds the value of HTML controls (input, select, textarea) to application data.
			//The ng-bind directive binds application data to the HTML view.
			<!DOCTYPE html>
			<html>
			  <script src="http://ajax.googleapis.com/ajax/libs/angularjs/1.3.14/angular.min.js"></script>
			  <body>
				<div ng-app="">
				  <p>Name: <input type="text" ng-model="name"></p>
				  <p ng-bind="name"></p>
				</div>
			  </body>
			</html>

			/*
			  * Example explained:
			  * AngularJS starts automatically when the web page has loaded.
			  * The ng-app directive tells AngularJS that the <div> element is the "owner" of an AngularJS application.
			  * The ng-model directive binds the value of the input field to the application variable name.
			  * The ng-bind directive binds the innerHTML of the <p> element to the application variable name.
			*/
			<tag> Here are content to be interpreted </tag>

			///////////////////////////////////
			// AngularJS Expressions

			// AngularJS expressions are written inside double braces: {{ expression }}.
			// AngularJS expressions binds data to HTML the same way as the ng-bind directive.
			// AngularJS will "output" data exactly where the expression is written.
			// AngularJS expressions are much like JavaScript expressions: They can contain literals, operators, and variables.
			// Example {{ 5 + 5 }} or {{ firstName + " " + lastName }}
			<!DOCTYPE html>
			<html>
			  <script src="http://ajax.googleapis.com/ajax/libs/angularjs/1.3.14/angular.min.js"></script>
			  <body>
				<div ng-app="">
				  <p>My first expression: {{ 5 + 5 }}</p>
				</div>
			  </body>
			</html>

			//If you remove the ng-app directive, HTML will display the expression as it is, without solving it:
			<!DOCTYPE html>
			<html>
			  <script src="http://ajax.googleapis.com/ajax/libs/angularjs/1.3.14/angular.min.js"></script>
			  <body>
				<div>
				  <p>My first expression: {{ 5 + 5 }}</p>
				</div>
			  </body>
			</html>

			// AngularJS expressions bind AngularJS data to HTML the same way as the ng-bind directive.
			<!DOCTYPE html>
			<html>
			<script src="http://ajax.googleapis.com/ajax/libs/angularjs/1.3.14/angular.min.js"></script>
			  <body>
				<div ng-app="">
				  <p>Name: <input type="text" ng-model="name"></p>
				  <p>{{name}}</p>
				</div>
			  </body>
			</html>

			// AngularJS numbers are like JavaScript numbers:
			<div ng-app="" ng-init="quantity=1;cost=5">
			  <p>Total in dollar: {{ quantity * cost }}</p>
			</div>

			//AngularJS strings are like JavaScript strings:
			<div ng-app="" ng-init="firstName='John';lastName='Doe'">
			  <p>The name is <span ng-bind="firstName + ' ' + lastName"></span></p>
			</div>

			//AngularJS objects are like JavaScript objects:
			<div ng-app="" ng-init="person={firstName:'John',lastName:'Doe'}">
			  <p>The name is {{ person.lastName }}</p>
			</div>

			//AngularJS arrays are like JavaScript arrays:
			<div ng-app="" ng-init="points=[1,15,19,2,40]">
			  <p>The third result is {{ points[2] }}</p>
			</div>

			// Like JavaScript expressions, AngularJS expressions can contain literals, operators, and variables.
			// Unlike JavaScript expressions, AngularJS expressions can be written inside HTML.
			// AngularJS expressions do not support conditionals, loops, and exceptions, while JavaScript expressions do.
			// AngularJS expressions support filters, while JavaScript expressions do not.

			///////////////////////////////////
			// AngularJS Directives


			//AngularJS directives are extended HTML attributes with the prefix ng-.
			//The ng-app directive initializes an AngularJS application.
			//The ng-init directive initializes application data.
			//The ng-model directive binds the value of HTML controls (input, select, textarea) to application data.
			<div ng-app="" ng-init="firstName='John'">
			  <p>Name: <input type="text" ng-model="firstName"></p>
			  <p>You wrote: {{ firstName }}</p>
			</div>

			//Using ng-init is not very common. You will learn how to initialize data in the chapter about controllers.

			//The ng-repeat directive repeats an HTML element:
			<div ng-app="" ng-init="names=['Jani','Hege','Kai']">
			  <ul>
				<li ng-repeat="x in names">
				  {{ x }}
				</li>
			  </ul>
			</div>

			//The ng-repeat directive used on an array of objects:
			<div ng-app="" ng-init="names=[
			{name:'Jani',country:'Norway'},
			{name:'Hege',country:'Sweden'},
			{name:'Kai',country:'Denmark'}]">
			  <ul>
				<li ng-repeat="x  in names">
				  {{ x.name + ', ' + x.country }}
				</li>
			  </ul>
			</div>

			// AngularJS is perfect for database CRUD (Create Read Update Delete) applications.
			// Just imagine if these objects were records from a database.

			// The ng-app directive defines the root element of an AngularJS application.
			// The ng-app directive will auto-bootstrap (automatically initialize) the application when a web page is loaded.
			// Later you will learn how ng-app can have a value (like ng-app="myModule"), to connect code modules.

			// The ng-init directive defines initial values for an AngularJS application.
			// Normally, you will not use ng-init. You will use a controller or module instead.
			// You will learn more about controllers and modules later.

			//The ng-model directive binds the value of HTML controls (input, select, textarea) to application data.
			//The ng-model directive can also:
			//Provide type validation for application data (number, email, required).
			//Provide status for application data (invalid, dirty, touched, error).
			//Provide CSS classes for HTML elements.
			//Bind HTML elements to HTML forms.

			//The ng-repeat directive clones HTML elements once for each item in a collection (in an array).

			///////////////////////////////////
			// AngularJS Controllers

			// AngularJS controllers control the data of AngularJS applications.
			// AngularJS controllers are regular JavaScript Objects.

			// AngularJS applications are controlled by controllers.
			// The ng-controller directive defines the application controller.
			// A controller is a JavaScript Object, created by a standard JavaScript object constructor.

			<div ng-app="myApp" ng-controller="myCtrl">

			First Name: <input type="text" ng-model="firstName"><br>
			Last Name: <input type="text" ng-model="lastName"><br>
			<br>
			Full Name: {{firstName + " " + lastName}}

			</div>

			<script>
			var app = angular.module('myApp', []);
			app.controller('myCtrl', function($scope) {
				$scope.firstName = "John";
				$scope.lastName = "Doe";
			});
			</script>

			//Application explained:

			//The AngularJS application is defined by  ng-app="myApp". The application runs inside the <div>.
			//The ng-controller="myCtrl" attribute is an AngularJS directive. It defines a controller.
			//The myCtrl function is a JavaScript function.
			//AngularJS will invoke the controller with a $scope object.
			//In AngularJS, $scope is the application object (the owner of application variables and functions).
			//The controller creates two properties (variables) in the scope (firstName and lastName).
			//The ng-model directives bind the input fields to the controller properties (firstName and lastName).

			//The example above demonstrated a controller object with two properties: lastName and firstName.
			//A controller can also have methods (variables as functions):
			<div ng-app="myApp" ng-controller="personCtrl">

			First Name: <input type="text" ng-model="firstName"><br>
			Last Name: <input type="text" ng-model="lastName"><br>
			<br>
			Full Name: {{fullName()}}

			</div>

			<script>
			var app = angular.module('myApp', []);
			app.controller('personCtrl', function($scope) {
				$scope.firstName = "John";
				$scope.lastName = "Doe";
				$scope.fullName = function() {
					return $scope.firstName + " " + $scope.lastName;
				}
			});
			</script>

			//In larger applications, it is common to store controllers in external files.
			//Just copy the code between the <script> </script> tags into an external file named personController.js:

			<div ng-app="myApp" ng-controller="personCtrl">

			First Name: <input type="text" ng-model="firstName"><br>
			Last Name: <input type="text" ng-model="lastName"><br>
			<br>
			Full Name: {{firstName + " " + lastName}}

			</div>

			<script src="personController.js"></script>

			// For the next example we will create a new controller file:
			angular.module('myApp', []).controller('namesCtrl', function($scope) {
				$scope.names = [
					{name:'Jani',country:'Norway'},
					{name:'Hege',country:'Sweden'},
					{name:'Kai',country:'Denmark'}
				];
			});

			//Save the file as  namesController.js:
			//And then use the controller file in an application:

			<div ng-app="myApp" ng-controller="namesCtrl">

			<ul>
			  <li ng-repeat="x in names">
				{{ x.name + ', ' + x.country }}
			  </li>
			</ul>

			</div>

			<script src="namesController.js"></script>

			///////////////////////////////////
			// AngularJS Filters

			// Filters can be added to expressions and directives using a pipe character.
			// AngularJS filters can be used to transform data:

			- **currency**:  Format a number to a currency format.
			- **filter**:  Select a subset of items from an array.
			- **lowercase**: Format a string to lower case.
			- **orderBy**: Orders an array by an expression.
			- **uppercase**: Format a string to upper case.

			//A filter can be added to an expression with a pipe character (|) and a filter.
			//(For the next two examples we will use the person controller from the previous chapter)
			//The uppercase filter format strings to upper case:
			<div ng-app="myApp" ng-controller="personCtrl">

			<p>The name is {{ lastName | uppercase }}</p>

			</div>

			//The lowercase filter format strings to lower case:
			<div ng-app="myApp" ng-controller="personCtrl">

			<p>The name is {{ lastName | lowercase }}</p>

			</div>

			//The currency filter formats a number as currency:
			<div ng-app="myApp" ng-controller="costCtrl">

			<input type="number" ng-model="quantity">
			<input type="number" ng-model="price">

			<p>Total = {{ (quantity * price) | currency }}</p>

			</div> 

			//A filter can be added to a directive with a pipe character (|) and a filter.
			//The orderBy filter orders an array by an expression:
			<div ng-app="myApp" ng-controller="namesCtrl">

			<ul>
			  <li ng-repeat="x in names | orderBy:'country'">
				{{ x.name + ', ' + x.country }}
			  </li>
			</ul>

			<div>

			//An input filter can be added to a directive with a pipe character (|) 
			//and filter followed by a colon and a model name.
			//The filter selects a subset of an array:

			<div ng-app="myApp" ng-controller="namesCtrl">

			<p><input type="text" ng-model="test"></p>

			<ul>
			  <li ng-repeat="x in names | filter:test | orderBy:'country'">
				{{ (x.name | uppercase) + ', ' + x.country }}
			  </li>
			</ul>

			</div>

			///////////////////////////////////
			// AngularJS AJAX - $http

			//$http is an AngularJS service for reading data from remote servers.

			// The following data can be provided by a web server:
			// http://www.w3schools.com/angular/customers.php
			// **Check the URL to see the data format**

			// AngularJS $http is a core service for reading data from web servers.
			// $http.get(url) is the function to use for reading server data.
			<div ng-app="myApp" ng-controller="customersCtrl"> 

			<ul>
			  <li ng-repeat="x in names">
				{{ x.Name + ', ' + x.Country }}
			  </li>
			</ul>

			</div>

			<script>
			var app = angular.module('myApp', []);
			app.controller('customersCtrl', function($scope, $http) {
				$http.get("http://www.w3schools.com/angular/customers.php")
				.success(function(response) {$scope.names = response.records;});
			});
			</script>

			Application explained:

			// The AngularJS application is defined by ng-app. The application runs inside a <div>.
			// The ng-controller directive names the controller object.
			// The customersCtrl function is a standard JavaScript object constructor.
			// AngularJS will invoke customersCtrl with a $scope and $http object.
			// $scope is the application object (the owner of application variables and functions).
			// $http is an XMLHttpRequest object for requesting external data.
			// $http.get() reads JSON data from http://www.w3schools.com/angular/customers.php.
			// If success, the controller creates a property (names) in the scope, with JSON data from the server.


			// Requests for data from a different server (than the requesting page), are called cross-site HTTP requests.
			// Cross-site requests are common on the web. Many pages load CSS, images, and scripts from different servers.
			// In modern browsers, cross-site HTTP requests from scripts are restricted to same site for security reasons.
			// The following line, in our PHP examples, has been added to allow cross-site access.
			header("Access-Control-Allow-Origin: *");


			///////////////////////////////////
			// AngularJS Tables

			// Displaying tables with angular is very simple:
			<div ng-app="myApp" ng-controller="customersCtrl"> 

			<table>
			  <tr ng-repeat="x in names">
				<td>{{ x.Name }}</td>
				<td>{{ x.Country }}</td>
			  </tr>
			</table>

			</div>

			<script>
			var app = angular.module('myApp', []);
			app.controller('customersCtrl', function($scope, $http) {
				$http.get("http://www.w3schools.com/angular/customers.php")
				.success(function (response) {$scope.names = response.records;});
			});
			</script>

			// To sort the table, add an orderBy filter: 
			<table>
			  <tr ng-repeat="x in names | orderBy : 'Country'">
				<td>{{ x.Name }}</td>
				<td>{{ x.Country }}</td>
			  </tr>
			</table>

			// To display the table index, add a <td> with $index: 
			<table>
			  <tr ng-repeat="x in names">
				<td>{{ $index + 1 }}</td>
				<td>{{ x.Name }}</td>
				<td>{{ x.Country }}</td>
			  </tr>
			</table>

			// Using $even and $odd
			<table>
			  <tr ng-repeat="x in names">
				<td ng-if="$odd" style="background-color:#f1f1f1">{{ x.Name }}</td>
				<td ng-if="$even">{{ x.Name }}</td>
				<td ng-if="$odd" style="background-color:#f1f1f1">{{ x.Country }}</td>
				<td ng-if="$even">{{ x.Country }}</td>
			  </tr>
			</table>

			///////////////////////////////////
			// AngularJS HTML DOM

			//AngularJS has directives for binding application data to the attributes of HTML DOM elements.

			// The ng-disabled directive binds AngularJS application data to the disabled attribute of HTML elements.

			<div ng-app="" ng-init="mySwitch=true">

			<p>
			<button ng-disabled="mySwitch">Click Me!</button>
			</p>

			<p>
			<input type="checkbox" ng-model="mySwitch">Button
			</p>

			</div>

			//Application explained:

			// The ng-disabled directive binds the application data mySwitch to the HTML button's disabled attribute.
			// The ng-model directive binds the value of the HTML checkbox element to the value of mySwitch.
			// If the value of mySwitch evaluates to true, the button will be disabled: 
			<p>
			<button disabled>Click Me!</button>
			</p>

			// If the value of mySwitch evaluates to false, the button will not be disabled: 
			<p>
			  <button>Click Me!</button>
			</p>

			// The ng-show directive shows or hides an HTML element.

			<div ng-app="">

			<p ng-show="true">I am visible.</p>

			<p ng-show="false">I am not visible.</p>

			</div>

			// The ng-show directive shows (or hides) an HTML element based on the value of ng-show.
			// You can use any expression that evaluates to true or false:
			<div ng-app="">
			<p ng-show="hour > 12">I am visible.</p>
			</div>

			///////////////////////////////////
			// AngularJS Events

			// AngularJS has its own HTML events directives.

			// The ng-click directive defines an AngularJS click event.
			<div ng-app="myApp" ng-controller="myCtrl">

			<button ng-click="count = count + 1">Click me!</button>

			<p>{{ count }}</p>

			</div>
			<script>
			var app = angular.module('myApp', []);
			app.controller('myCtrl', function($scope) {
				$scope.count = 0;
			});
			</script>

			// The ng-hide directive can be used to set the visibility of a part of an application.
			// The value ng-hide="true" makes an HTML element invisible.
			// The value ng-hide="false" makes the element visible.
			<div ng-app="myApp" ng-controller="personCtrl">

			<button ng-click="toggle()">Toggle</button>

			<p ng-hide="myVar">
			First Name: <input type="text" ng-model="firstName"><br>
			Last Name: <input type="text" ng-model="lastName"><br>
			<br>
			Full Name: {{firstName + " " + lastName}}
			</p>

			</div>

			<script>
			var app = angular.module('myApp', []);
			app.controller('personCtrl', function($scope) {
				$scope.firstName = "John",
				$scope.lastName = "Doe"
				$scope.myVar = false;
				$scope.toggle = function() {
					$scope.myVar = !$scope.myVar;
				};
			});
			</script>

			//Application explained:

			// The first part of the personController is the same as in the chapter about controllers.
			// The application has a default property (a variable): $scope.myVar = false;
			// The ng-hide directive sets the visibility, of a <p> element with two input fields, 
			// according to the value (true or false) of myVar.
			// The function toggle() toggles myVar between true and false.
			// The value ng-hide="true" makes the element invisible.


			// The ng-show directive can also be used to set the visibility of a part of an application.
			// The value ng-show="false" makes an HTML element invisible.
			// The value ng-show="true" makes the element visible.
			// Here is the same example as above, using ng-show instead of ng-hide:
			<div ng-app="myApp" ng-controller="personCtrl">

			<button ng-click="toggle()">Toggle</button>

			<p ng-show="myVar">
			First Name: <input type="text" ng-model="firstName"><br>
			Last Name: <input type="text" ng-model="lastName"><br>
			<br>
			Full Name: {{firstName + " " + lastName}}
			</p>

			</div>

			<script>
			var app = angular.module('myApp', []);
			app.controller('personCtrl', function($scope) {
				$scope.firstName = "John",
				$scope.lastName = "Doe"
				$scope.myVar = true;
				$scope.toggle = function() {
					$scope.myVar = !$scope.myVar;
				}
			});
			</script>

			///////////////////////////////////
			// AngularJS Modules

			// An AngularJS module defines an application.
			// The module is a container for the different parts of an application.
			// The module is a container for the application controllers.
			// Controllers always belong to a module.

			// This application ("myApp") has one controller ("myCtrl"):

			<!DOCTYPE html>
			<html>
			<script src="http://ajax.googleapis.com/ajax/libs/angularjs/1.3.14/angular.min.js"></script>
			<body>

			<div ng-app="myApp" ng-controller="myCtrl">
			{{ firstName + " " + lastName }}
			</div>

			<script>
			var app = angular.module("myApp", []);
			app.controller("myCtrl", function($scope) {
				$scope.firstName = "John";
				$scope.lastName = "Doe";
			});
			</script>

			</body>
			</html>

			// It is common in AngularJS applications to put the module and the controllers in JavaScript files.
			// In this example, "myApp.js" contains an application module definition, while "myCtrl.js" contains the controller:

			<!DOCTYPE html>
			<html>
			<script src="http://ajax.googleapis.com/ajax/libs/angularjs/1.3.14/angular.min.js"></script>
			<body>

			<div ng-app="myApp" ng-controller="myCtrl">
			{{ firstName + " " + lastName }}
			</div>

			<script src="myApp.js"></script>
			<script src="myCtrl.js"></script>

			</body>
			</html>

			//myApp.js
			var app = angular.module("myApp", []); 

			// The [] parameter in the module definition can be used to define dependent modules.

			// myCtrl.js
			app.controller("myCtrl", function($scope) {
				$scope.firstName  = "John";
				$scope.lastName= "Doe";
			});

			// Global functions should be avoided in JavaScript. They can easily be overwritten 
			// or destroyed by other scripts.

			// AngularJS modules reduces this problem, by keeping all functions local to the module.

			// While it is common in HTML applications to place scripts at the end of the 
			// <body> element, it is recommended that you load the AngularJS library either
			// in the <head> or at the start of the <body>.

			// This is because calls to angular.module can only be compiled after the library has been loaded.

			<!DOCTYPE html>
			<html>
			<body>
			<script src="http://ajax.googleapis.com/ajax/libs/angularjs/1.3.14/angular.min.js"></script>

			<div ng-app="myApp" ng-controller="myCtrl">
			{{ firstName + " " + lastName }}
			</div>

			<script>
			var app = angular.module("myApp", []);
			app.controller("myCtrl", function($scope) {
				$scope.firstName = "John";
				$scope.lastName = "Doe";
			});
			</script>

			</body>
			</html>


			///////////////////////////////////
			// AngularJS Applications

			// AngularJS modules define AngularJS applications.
			// AngularJS controllers control AngularJS applications.
			// The ng-app directive defines the application, the ng-controller directive defines the controller.
			<div ng-app="myApp" ng-controller="myCtrl">
			  First Name: <input type="text" ng-model="firstName"><br>
			  Last Name: <input type="text" ng-model="lastName"><br>
			  <br>
			  Full Name: {{firstName + " " + lastName}}
			</div>
			<script>
			  var app = angular.module('myApp', []);
			  app.controller('myCtrl', function($scope) {
				  $scope.firstName= "John";
				  $scope.lastName= "Doe";
			  });
			</script>

			// AngularJS modules define applications:
			var app = angular.module('myApp', []);

			// AngularJS controllers control applications:
			app.controller('myCtrl', function($scope) {
				$scope.firstName= "John";
				$scope.lastName= "Doe";
			});
	- https://www.w3schools.com/angular/
		- Angular HOME
			- AngularJS Directives
				Directive			Description
				ng-app				Defines the root element of an application.
				ng-bind				Binds the content of an HTML element to application data.
				ng-bind-html		Binds the innerHTML of an HTML element to application data, and also removes dangerous code from the HTML string.
				ng-bind-template	Specifies that the text content should be replaced with a template.
				ng-blur				Specifies a behavior on blur events.
				ng-change			Specifies an expression to evaluate when content is being changed by the user.
				ng-checked			Specifies if an element is checked or not.
				ng-class			Specifies CSS classes on HTML elements.
				ng-class-even		Same as ng-class, but will only take effect on even rows.
				ng-class-odd		Same as ng-class, but will only take effect on odd rows.
				ng-click			Specifies an expression to evaluate when an element is being clicked.
				ng-cloak			Prevents flickering when your application is being loaded.
				ng-controller		Defines the controller object for an application.
				ng-copy				Specifies a behavior on copy events.
				ng-csp				Changes the content security policy.
				ng-cut				Specifies a behavior on cut events.
				ng-dblclick			Specifies a behavior on double-click events.
				ng-disabled			Specifies if an element is disabled or not.
				ng-focus			Specifies a behavior on focus events.
				ng-form				Specifies an HTML form to inherit controls from.
				ng-hide				Hides or shows HTML elements.
				ng-href				Specifies a url for the <a> element.
				ng-if				Removes the HTML element if a condition is false.
				ng-include			Includes HTML in an application.
				ng-init				Defines initial values for an application.
				ng-jq				Specifies that the application must use a library, like jQuery.
				ng-keydown			Specifies a behavior on keydown events.
				ng-keypress			Specifies a behavior on keypress events.
				ng-keyup			Specifies a behavior on keyup events.
				ng-list				Converts text into a list (array).
				ng-maxlength		Specifies the maximum number of characters allowed in the input field.
				ng-minlength		Specifies the minimum number of characters allowed in the input field.
				ng-model			Binds the value of HTML controls to application data.
				ng-model-options	Specifies how updates in the model are done.
				ng-mousedown		Specifies a behavior on mousedown events.
				ng-mouseenter		Specifies a behavior on mouseenter events.
				ng-mouseleave		Specifies a behavior on mouseleave events.
				ng-mousemove		Specifies a behavior on mousemove events.
				ng-mouseover		Specifies a behavior on mouseover events.
				ng-mouseup			Specifies a behavior on mouseup events.
				ng-non-bindable		Specifies that no data binding can happen in this element, or its children.
				ng-open				Specifies the open attribute of an element.
				ng-options			Specifies <options> in a <select> list.
				ng-paste			Specifies a behavior on paste events.
				ng-pluralize		Specifies a message to display according to en-us localization rules.
				ng-readonly			Specifies the readonly attribute of an element.
				ng-repeat			Defines a template for each data in a collection.
				ng-required			Specifies the required attribute of an element.
				ng-selected			Specifies the selected attribute of an element.
				ng-show				Shows or hides HTML elements.
				ng-src				Specifies the src attribute for the <img> element.
				ng-srcset			Specifies the srcset attribute for the <img> element.
				ng-style			Specifies the style attribute for an element.
				ng-submit			Specifies expressions to run on onsubmit events.
				ng-switch			Specifies a condition that will be used to show/hide child elements.
				ng-transclude		Specifies a point to insert transcluded elements.
				ng-value			Specifies the value of an input element.

			- AngularJS Directives on HTML Elements
				- AngularJS modifies the default behavior of some HTML elements.

				- Element	Description
					a			AngularJS modifies the <a> element's default behaviors.
					form		AngularJS modifies the <form> element's default behaviors.
					input		AngularJS modifies the <input> element's default behaviors.
					script		AngularJS modifies the <script> element's default behaviors.
					select		AngularJS modifies the <select> element's default behaviors.
					textarea	AngularJS modifies the <textarea> element's default behaviors.

				- AngularJS Filters
					Filter		Description
					currency	Format a number to a currency format.
					date		Format a date to a specified format.
					filter		Select a subset of items from an array.
					json		Format an object to a JSON string.
					limitTo		Limits an array, or a string, into a specified number of elements/characters.
					lowercase	Format a string to lower case.
					number		Format a number to a string.
					orderBy		Orders an array by an expression.
					uppercase	Format a string to upper case.
				- Filters are explained in Angular Filters.

				- AngularJS Validation Properties
					- $dirty
					- $invalid
					- $error
				- Validation is explained in Angular Validation.

			- AngularJS Global API
				- Converting
					API					Description
					angular.lowercase()	Converts a string to lowercase
					angular.uppercase()	Converts a string to uppercase
					angular.copy()		Creates a deep copy of an object or an array
					angular.forEach()	Executes a function for each element in an object or array
				- Comparing
					API						Description
					angular.isArray()		Returns true if the reference is an array
					angular.isDate()		Returns true if the reference is a date
					angular.isDefined()		Returns true if the reference is defined
					angular.isElement()		Returns true if the reference is a DOM element
					angular.isFunction()	Returns true if the reference is a function
					angular.isNumber()		Returns true if the reference is a number
					angular.isObject()		Returns true if the reference is an object
					angular.isString()		Returns true if the reference is a string
					angular.isUndefined()	Returns true if the reference is undefined
					angular.equals()		Returns true if two references are equal
				- JSON
					API					Description
					angular.fromJson()	Takes a JSON string and returns an JavaScript object
					angular.toJson()	Takes a JavaScript object and returns a JSON string
				- Basic
					API					Description
					angular.bootstrap()	Starts AngularJS manually
					angular.element()	Wraps an HTML element as an jQuery element
					angular.module()	Creates, registers, or retrieves an AngularJS module
		- Angular Intro
			- AngularJS is a JavaScript Framework
				- <script src="https://ajax.googleapis.com/ajax/libs/angularjs/1.6.4/angular.min.js"></script>
			- AngularJS Directives
				- The ng-init directive initializes AngularJS application variables.
					- <div ng-app="" ng-init="firstName='John'">
						<p>The name is <span ng-bind="firstName"></span></p>
						</div>
					- <div data-ng-app="" data-ng-init="firstName='John'">
						<p>The name is <span data-ng-bind="firstName"></span></p>
						</div>
			- AngularJS Expressions
				- <div ng-app="">
					  <p>My first expression: {{ 5 + 5 }}</p>
					</div>
				- AngularJS expressions bind AngularJS data to HTML the same way as the ng-bind directive.
					- <div ng-app="">
						  <p>Name: <input type="text" ng-model="name"></p>
						  <p>{{name}}</p>
						</div>
			- AngularJS Applications
				- AngularJS modules define AngularJS applications.
				- AngularJS controllers control AngularJS applications.
				- The ng-app directive defines the application, the ng-controller directive defines the controller.
				- AngularJS Module
					- var app = angular.module('myApp', []);
				- AngularJS Controller
					- app.controller('myCtrl', function($scope) {
						$scope.firstName= "John";
						$scope.lastName= "Doe";
					});
		- Angular Expressions
		- Angular Modules
			- Adding a Directive
				- <div ng-app="myApp" w3-test-directive></div>
					<script> 
						var app = angular.module("myApp", []);
						app.directive("w3TestDirective", function() {
							return {
								template : "I was made in a directive constructor!"
							};
						});
					</script>
			- Modules and Controllers in Files
				- <div ng-app="myApp" ng-controller="myCtrl">
					{{ firstName + " " + lastName }}
					</div>

					<script src="myApp.js"></script>
					<script src="myCtrl.js"></script>
				- myApp.js
					- var app = angular.module("myApp", []);
				- myCtrl.js
					- app.controller("myCtrl", function($scope) {
							$scope.firstName = "John";
							$scope.lastName= "Doe";
						});
		- Angular Directives
			- AngularJS Directives
				- AngularJS directives are extended HTML attributes with the prefix ng-.
				- The ng-app directive initializes an AngularJS application.
				- The ng-init directive initializes application data.
				- The ng-model directive binds the value of HTML controls (input, select, textarea) to application data.
			- Data Binding
				- Using ng-init is not very common. You will learn how to initialize data in the chapter about controllers.
				- <div ng-app="" ng-init="quantity=1;price=5">
					Quantity: <input type="number" ng-model="quantity">
					Costs:    <input type="number" ng-model="price">
					Total in dollar: {{ quantity * price }}
					</div>
			- Repeating HTML Elements
				- The ng-repeat directive repeats an HTML element:
				- <div ng-app="" ng-init="names=['Jani','Hege','Kai']">
					  <ul>
						<li ng-repeat="x in names">
						  {{ x }}
						</li>
					  </ul>
					</div>
			- The ng-app Directive
				- The ng-app directive defines the root element of an AngularJS application.
				- The ng-app directive will auto-bootstrap (automatically initialize) the application when a web page is loaded.
			- The ng-init Directive
				- The ng-init directive defines initial values for an AngularJS application.
				- Normally, you will not use ng-init. You will use a controller or module instead.
				- You will learn more about controllers and modules later.
			- The ng-model Directive
				- The ng-model directive binds the value of HTML controls (input, select, textarea) to application data.
				- The ng-model directive can also:
					- Provide type validation for application data (number, email, required).
					- Provide status for application data (invalid, dirty, touched, error).
					- Provide CSS classes for HTML elements.
					- Bind HTML elements to HTML forms.
			- Create New Directives
				- In addition to all the built-in AngularJS directives, you can create your own directives.
				- New directives are created by using the .directive function.
				- When naming a directive, you must use a camel case name, w3TestDirective, but when invoking it, you must use - separated name, w3-test-directive:
					- <body ng-app="myApp">
						<w3-test-directive></w3-test-directive>
						<script>
							var app = angular.module("myApp", []);
							app.directive("w3TestDirective", function() {
								return {
									template : "<h1>Made by a directive!</h1>"
								};
							});
						</script>
						</body>
					- You can invoke a directive by using:
						- Element name
						- Attribute
						- Class
						- Comment
					- The examples below will all produce the same result:
						- Element name
							- <w3-test-directive></w3-test-directive>
						- Attribute
							- <div w3-test-directive></div>
						- Class
							- <div class="w3-test-directive"></div>
						- Comment
							- <!-- directive: w3-test-directive -->
			- Restrictions
				 - You can restrict your directives to only be invoked by some of the methods.
					- By adding a restrict property with the value "A", the directive can only be invoked by attributes:
						- var app = angular.module("myApp", []);
							app.directive("w3TestDirective", function() {
								return {
									restrict : "A",
									template : "<h1>Made by a directive!</h1>"
								};
							});
					- The legal restrict values are:
						- E for Element name
						- A for Attribute
						- C for Class
						- M for Comment
					- By default the value is EA, meaning that both Element names and attribute names can invoke the directive.
		- Angular Model
			- The ng-model Directive
				- With the ng-model directive you can bind the value of an input field to a variable created in AngularJS.
				- <div ng-app="myApp" ng-controller="myCtrl">
						Name: <input ng-model="name">
					</div>

					<script>
						var app = angular.module('myApp', []);
						app.controller('myCtrl', function($scope) {
							$scope.name = "John Doe";
						});
					</script>
			- Two-Way Binding
				- The binding goes both ways. If the user changes the value inside the input field, the AngularJS property will also change its value:
				- <div ng-app="myApp" ng-controller="myCtrl">
						Name: <input ng-model="name">
						<h1>You entered: {{name}}</h1>
					</div>
			- Validate User Input
				- The ng-model directive can provide type validation for application data (number, e-mail, required):
				- <form ng-app="" name="myForm">
						Email:
						<input type="email" name="myAddress" ng-model="text">
						<span ng-show="myForm.myAddress.$error.email">Not a valid e-mail address</span>
					</form>
			- Application Status
				- <form ng-app="" name="myForm" ng-init="myText = 'post@myweb.com'">
						Email:
						<input type="email" name="myAddress" ng-model="myText" required>
						<h1>Status</h1>
						{{myForm.myAddress.$valid}}
						{{myForm.myAddress.$dirty}}
						{{myForm.myAddress.$touched}}
					</form>
			- CSS Classes
				- The ng-model directive provides CSS classes for HTML elements, depending on their status:
				- <style>
					input.ng-invalid {
						background-color: lightblue;
					}
					</style>
					<body>

					<form ng-app="" name="myForm">
						Enter your name:
						<input name="myName" ng-model="myText" required>
					</form>
				- The ng-model directive adds/removes the following classes, according to the status of the form field:
					- ng-empty
					- ng-not-empty
					- ng-touched
					- ng-untouched
					- ng-valid
					- ng-invalid
					- ng-dirty
					- ng-pending
					- ng-pristine
		- Angular Data Binding
			- HTML View
				- You can use the ng-bind directive, which will bind the innerHTML of the element to the specified model property:
					- <p ng-bind="firstname"></p>
				- You can also use double braces {{ }} to display content from the model:
					- <p>First name: {{firstname}}</p>
		- Angular Controllers
		- Angular Scopes
			- Root Scope
				- All applications have a $rootScope which is the scope created on the HTML element that contains the ng-app directive.
				- The rootScope is available in the entire application.
				- If a variable has the same name in both the current scope and in the rootScope, the application uses the one in the current scope.
				- <body ng-app="myApp">

					<p>The rootScope's favorite color:</p>
					<h1>{{color}}</h1>

					<div ng-controller="myCtrl">
						<p>The scope of the controller's favorite color:</p>
						<h1>{{color}}</h1>
					</div>

					<p>The rootScope's favorite color is still:</p>
					<h1>{{color}}</h1>

					<script>
					var app = angular.module('myApp', []);
					app.run(function($rootScope) {
						$rootScope.color = 'blue';
					});
					app.controller('myCtrl', function($scope) {
						$scope.color = "red";
					});
					</script>
					</body>
		- Angular Filters
			- AngularJS Filters
				- AngularJS provides filters to transform data:

					currency 	Format a number to a currency format.
					date 		Format a date to a specified format.
					filter 		Select a subset of items from an array.
					json 		Format an object to a JSON string.
					limitTo 	Limits an array/string, into a specified number of elements/characters.
					lowercase 	Format a string to lower case.
					number 		Format a number to a string.
					orderBy 	Orders an array by an expression.
					uppercase 	Format a string to upper case.
					
				- Adding Filters to Expressions
					- Filters can be added to expressions by using the pipe character |, followed by a filter.
					- <p>The name is {{ lastName | uppercase }}</p>
				- Adding Filters to Directives
					- Filters are added to directives, like ng-repeat, by using the pipe character |, followed by a filter:
					- <ul>
						  <li ng-repeat="x in names | orderBy:'country'">
							{{ x.name + ', ' + x.country }}
						  </li>
						</ul>
				- The filter Filter
					- The filter filter can only be used on arrays, and it returns an array containing only the matching items.
					- <li ng-repeat="x in names | filter : 'i'">
						{{ x }}
					  </li>
				- Filter an Array Based on User Input
					- By setting the ng-model directive on an input field, we can use the value of the input field as an expression in a filter.
						- <div ng-app="myApp" ng-controller="namesCtrl">
								<p><input type="text" ng-model="test"></p>
								<ul>
								  <li ng-repeat="x in names | filter : test">
									{{ x }}
								  </li>
								</ul>
							</div>
				- Sort an Array Based on User Input
					- By adding the ng-click directive on the table headers, we can run a function that changes the sorting order of the array:
					- <div ng-app="myApp" ng-controller="namesCtrl">

						<table border="1" width="100%">
						  <tr>
							<th ng-click="orderByMe('name')">Name</th>
							<th ng-click="orderByMe('country')">Country</th>
						  </tr>
						  <tr ng-repeat="x in names | orderBy:myOrderBy">
							<td>{{x.name}}</td>
							<td>{{x.country}}</td>
						  </tr>
						</table>

						</div>

						<script>
							angular.module('myApp', []).controller('namesCtrl', function($scope) {
							  $scope.names = [
								{name:'Jani',country:'Norway'},
								{name:'Carl',country:'Sweden'},
								{name:'Margareth',country:'England'},
								{name:'Hege',country:'Norway'},
								{name:'Joe',country:'Denmark'},
								{name:'Gustav',country:'Sweden'},
								{name:'Birgit',country:'Denmark'},
								{name:'Mary',country:'England'},
								{name:'Kai',country:'Norway'}
							  ];
							  $scope.orderByMe = function(x) {
								$scope.myOrderBy = x;
							  }
							});
						</script>
				- Custom Filters
					- You can make your own filters by registering a new filter factory function with your module:
					- <ul ng-app="myApp" ng-controller="namesCtrl">
							<li ng-repeat="x in names">
								{{x | myFormat}}
							</li>
						</ul>

						<script>
						var app = angular.module('myApp', []);
						app.filter('myFormat', function() {
							return function(x) {
								var i, c, txt = "";
								for (i = 0; i < x.length; i++) {
									c = x[i];
									if (i % 2 == 0) {
										c = c.toUpperCase();
									}
									txt += c;
								}
								return txt;
							};
						});
						app.controller('namesCtrl', function($scope) {
							$scope.names = ['Jani', 'Carl', 'Margareth', 'Hege', 'Joe', 'Gustav', 'Birgit', 'Mary', 'Kai'];
						});
						</script>
		- Angular Services
			- What is a Service?
				- In AngularJS, a service is a function, or object, that is available for, and limited to, your AngularJS application.
				- AngularJS has about 30 built-in services. One of them is the $location service.
				- The $location service has methods which return information about the location of the current web page:
					- var app = angular.module('myApp', []);
						app.controller('customersCtrl', function($scope, $location) {
							$scope.myUrl = $location.absUrl();
						});
			- The $http Service
				- The $http service is one of the most common used services in AngularJS applications. The service makes a request to the server, and lets your application handle the response.
				- var app = angular.module('myApp', []);
					app.controller('myCtrl', function($scope, $http) {
						$http.get("welcome.htm").then(function (response) {
							$scope.myWelcome = response.data;
						});
					});
			- The $timeout Service
				- The $timeout service is AngularJS' version of the window.setTimeout function.
				- Display a new message after two seconds:
					var app = angular.module('myApp', []);
					app.controller('myCtrl', function($scope, $timeout) {
						$scope.myHeader = "Hello World!";
						$timeout(function () {
							$scope.myHeader = "How are you today?";
						}, 2000);
					});
			- The $interval Service
				- The $interval service is AngularJS' version of the window.setInterval function.
				- Display the time every second:
					var app = angular.module('myApp', []);
					app.controller('myCtrl', function($scope, $interval) {
						$scope.theTime = new Date().toLocaleTimeString();
						$interval(function () {
							$scope.theTime = new Date().toLocaleTimeString();
						}, 1000);
					});
			- Create Your Own Service
				- Create a service named hexafy:
					app.service('hexafy', function() {
						this.myFunc = function (x) {
							return x.toString(16);
						}
					});
				- Use the custom made service named hexafy to convert a number into a hexadecimal number:
					app.controller('myCtrl', function($scope, hexafy) {
						$scope.hex = hexafy.myFunc(255);
					});
			- Use a Custom Service Inside a Filter
				- Once you have created a service, and connected it to your application, you can use the service in any controller, directive, filter, or even inside other services.
				- To use the service inside a filter, add it as a dependency when defining the filter:
					- app.filter('myFormat',['hexafy', function(hexafy) {
							return function(x) {
								return hexafy.myFunc(x);
							};
						}]);
				- You can use the filter when displaying values from an object, or an array:
					- <ul>
							<li ng-repeat="x in counts">{{x | myFormat}}</li>
						</ul>
		- Angular Http
			- AngularJS $http
				- The AngularJS $http service makes a request to the server, and returns a response.
					- <div ng-app="myApp" ng-controller="myCtrl"> 
							<p>Today's welcome message is:</p>
							<h1>{{myWelcome}}</h1>
						</div>
						<script>
							var app = angular.module('myApp', []);
							app.controller('myCtrl', function($scope, $http) {
								$http.get("welcome.htm")
								.then(function(response) {
									$scope.myWelcome = response.data;
								});
							});
						</script>
				- Methods
					- The example above uses the .get method of the $http service.
					- The .get method is a shortcut method of the $http service. There are several shortcut methods:
						.delete()
						.get()
						.head()
						.jsonp()
						.patch()
						.post()
						.put()
					- The methods above are all shortcuts of calling the $http service:
						- var app = angular.module('myApp', []);
							app.controller('myCtrl', function($scope, $http) {
								$http({
									method : "GET",
									url : "welcome.htm"
								}).then(function mySuccess(response) {
									$scope.myWelcome = response.data;
								}, function myError(response) {
									$scope.myWelcome = response.statusText;
								});
							});
					- Properties
						- The response from the server is an object with these properties:
							.config the object used to generate the request.
							.data a string, or an object, carrying the response from the server.
							.headers a function to use to get header information.
							.status a number defining the HTTP status.
							.statusText a string defining the HTTP status.
						- var app = angular.module('myApp', []);
							app.controller('myCtrl', function($scope, $http) {
								$http.get("welcome.htm")
								.then(function(response) {
									$scope.content = response.data;
									$scope.statuscode = response.status;
									$scope.statustext = response.statusText; 
								});
							});
						- To handle errors, add one more functions to the .then method:
							- var app = angular.module('myApp', []);
								app.controller('myCtrl', function($scope, $http) {
									$http.get("wrongfilename.htm")
									.then(function(response) {
										//First function handles success
										$scope.content = response.data;
									}, function(response) {
										//Second function handles error
										$scope.content = "Something went wrong";
									});
								});
					- JSON
						- <div ng-app="myApp" ng-controller="customersCtrl"> 
								<ul>
								  <li ng-repeat="x in myData">
									{{ x.Name + ', ' + x.Country }}
								  </li>
								</ul>
							</div>
							<script>
								var app = angular.module('myApp', []);
								app.controller('customersCtrl', function($scope, $http) {
									$http.get("customers.php").then(function(response) {
										$scope.myData = response.data.records;
									});
								});
							</script>
		- Angular Tables
			- Displaying Data in a Table
				- <div ng-app="myApp" ng-controller="customersCtrl"> 
						<table>
						  <tr ng-repeat="x in names">
							<td>{{ x.Name }}</td>
							<td>{{ x.Country }}</td>
						  </tr>
						</table>
					</div>
					<script>
						var app = angular.module('myApp', []);
						app.controller('customersCtrl', function($scope, $http) {
							$http.get("customers.php")
							.then(function (response) {$scope.names = response.data.records;});
						});
					</script>
			- Displaying with CSS Style
				- <style>
						table, th , td {
						  border: 1px solid grey;
						  border-collapse: collapse;
						  padding: 5px;
						}
						table tr:nth-child(odd) {
						  background-color: #f1f1f1;
						}
						table tr:nth-child(even) {
						  background-color: #ffffff;
						}
					</style>
			- Display with orderBy Filter
				- <table>
					  <tr ng-repeat="x in names | orderBy : 'Country'">
						<td>{{ x.Name }}</td>
						<td>{{ x.Country }}</td>
					  </tr>
					</table>
			- Display with uppercase Filter
				- <table>
					  <tr ng-repeat="x in names">
						<td>{{ x.Name }}</td>
						<td>{{ x.Country | uppercase }}</td>
					  </tr>
					</table>
			- Display the Table Index ($index)
				- <table>
					  <tr ng-repeat="x in names">
						<td>{{ $index + 1 }}</td>
						<td>{{ x.Name }}</td>
						<td>{{ x.Country }}</td>
					  </tr>
					</table>
			- Using $even and $odd
				- <table>
						<tr ng-repeat="x in names">
							<td ng-if="$odd" style="background-color:#f1f1f1">{{ x.Name }}</td>
							<td ng-if="$even">{{ x.Name }}</td>
							<td ng-if="$odd" style="background-color:#f1f1f1">{{ x.Country }}</td>
							<td ng-if="$even">{{ x.Country }}</td>
						</tr>
					</table>
		- Angular Select
			- Creating a Select Box Using ng-options
				- If you want to create a dropdown list, based on an object or an array in AngularJS, you should use the ng-options directive:
				- <div ng-app="myApp" ng-controller="myCtrl">
						<select ng-model="selectedName" ng-options="x for x in names">
						</select>
					</div>
					<script>
						var app = angular.module('myApp', []);
						app.controller('myCtrl', function($scope) {
							$scope.names = ["Emil", "Tobias", "Linus"];
						});
					</script>
			- ng-options vs ng-repeat
				- <select>
						<option ng-repeat="x in names">{{x}}</option>
					</select>
				- Because the ng-repeat directive repeats a block of HTML code for each item in an array, it can be used to create options in a dropdown list, but the ng-options directive was made especially for filling a dropdown list with options, and has at least one important advantage:
					- Dropdowns made with ng-options allows the selected value to be an object, while dropdowns made from ng-repeat has to be a string.
					- <select ng-model="selectedCar" ng-options="x.model for x in cars">
						</select>
						<h1>You selected: {{selectedCar.model}}</h1>
						<p>Its color is: {{selectedCar.color}}</p>
				- The Data Source as an Object
					- $scope.cars = {
							car01 : {brand : "Ford", model : "Mustang", color : "red"},
							car02 : {brand : "Fiat", model : "500", color : "white"},
							car03 : {brand : "Volvo", model : "XC90", color : "black"}
						};
					- <select ng-model="selectedCar" ng-options="y.brand for (x, y) in cars">
						</select>
						<h1>You selected: {{selectedCar}}</h1>
		- Angular SQL
			- Cross-Site HTTP Requests
				- header("Access-Control-Allow-Origin: *");
					header("Content-Type: application/json; charset=ISO-8859-1");
		- Angular DOM
			- The ng-disabled Directive
				- The ng-disabled directive binds AngularJS application data to the disabled attribute of HTML elements.
				- <div ng-app="" ng-init="mySwitch=true">
						<p>
							<button ng-disabled="mySwitch">Click Me!</button>
						</p>
						<p>
							<input type="checkbox" ng-model="mySwitch">Button
						</p>
						<p>
							{{ mySwitch }}
						</p>
					</div>
			- The ng-show Directive
			- The ng-hide Directive
		- Angular Events
			- AngularJS Events
				- You can add AngularJS event listeners to your HTML elements by using one or more of these directives:
					ng-blur
					ng-change
					ng-click
					ng-copy
					ng-cut
					ng-dblclick
					ng-focus
					ng-keydown
					ng-keypress
					ng-keyup
					ng-mousedown
					ng-mouseenter
					ng-mouseleave
					ng-mousemove
					ng-mouseover
					ng-mouseup
					ng-paste
				- The event directives allows us to run AngularJS functions at certain user events.
				- An AngularJS event will not overwrite an HTML event, both events will be executed.
			- Mouse Events
				- Mouse events occur when the cursor moves over an element, in this order:
					ng-mouseenter
					ng-mouseover
					ng-mousemove
					ng-mouseleave
				- Or when a mouse button is clicked on an element, in this order:
					ng-mousedown
					ng-mouseup
					ng-click
				- You can add mouse events on any HTML element.
					- <div ng-app="myApp" ng-controller="myCtrl">
							<h1 ng-mousemove="count = count + 1">Mouse over me!</h1>
							<h2>{{ count }}</h2>
						</div>
						<script>
							var app = angular.module('myApp', []);
							app.controller('myCtrl', function($scope) {
								$scope.count = 0;
							});
						</script>
			- The ng-click Directive
				- The ng-click directive defines AngularJS code that will be executed when the element is being clicked.
					- <div ng-app="myApp" ng-controller="myCtrl">
							<button ng-click="myFunction()">Click me!</button>
							<p>{{ count }}</p>
						</div>
						<script>
							var app = angular.module('myApp', []);
							app.controller('myCtrl', function($scope) {
								$scope.count = 0;
								$scope.myFunction = function() {
									$scope.count++;
								}
							});
						</script>
				- Toggle, True/False
					- <div ng-app="myApp" ng-controller="myCtrl">
							<button ng-click="myFunc()">Click Me!</button>
							<div ng-show="showMe">
								<h1>Menu:</h1>
								<div>Pizza</div>
								<div>Pasta</div>
								<div>Pesce</div>
							</div>
						</div>
						<script>
							var app = angular.module('myApp', []);
							app.controller('myCtrl', function($scope) {
								$scope.showMe = false;
								$scope.myFunc = function() {
									$scope.showMe = !$scope.showMe;
								}
							});
						</script>
				- $event Object
					- You can pass the $event object as an argument when calling the function.
					- The $event object contains the browser's event object:
						- <div ng-app="myApp" ng-controller="myCtrl">
								<h1 ng-mousemove="myFunc($event)">Mouse Over Me!</h1>
								<p>Coordinates: {{x + ', ' + y}}</p>
							</div>
							<script>
								var app = angular.module('myApp', []);
								app.controller('myCtrl', function($scope) {
									$scope.myFunc = function(myE) {
										$scope.x = myE.clientX;
										$scope.y = myE.clientY;
									}
								});
							</script>
		- Angular Forms
			- Input Controls
				- Input controls are the HTML input elements:
					input elements
					select elements
					button elements
					textarea elements
			- Checkbox
				- A checkbox has the value true or false. Apply the ng-model directive to a checkbox, and use its value in your application.
				-  <form>
						Check to show a header:
						<input type="checkbox" ng-model="myVar">
					</form>
					<h1 ng-show="myVar">My Header</h1>
			- Radiobuttons
				- Bind radio buttons to your application with the ng-model directive.
				- Radio buttons with the same ng-model can have different values, but only the selected one will be used.
				-  <form>
						Pick a topic:
						<input type="radio" ng-model="myVar" value="dogs">Dogs
						<input type="radio" ng-model="myVar" value="tuts">Tutorials
						<input type="radio" ng-model="myVar" value="cars">Cars
					</form>
			- Selectbox
				- Bind select boxes to your application with the ng-model directive.
				- The property defined in the ng-model attribute will have the value of the selected option in the selectbox.
				- <form>
						Select a topic:
						<select ng-model="myVar">
							<option value="">
							<option value="dogs">Dogs
							<option value="tuts">Tutorials
							<option value="cars">Cars
						</select>
					</form>
			- An AngularJS Form Example
				- <div ng-app="myApp" ng-controller="formCtrl">
					  <form novalidate>
						First Name:<br>
						<input type="text" ng-model="user.firstName"><br>
						Last Name:<br>
						<input type="text" ng-model="user.lastName">
						<br><br>
						<button ng-click="reset()">RESET</button>
					  </form>
					  <p>form = {{user}}</p>
					  <p>master = {{master}}</p>
					</div>
					<script>
						var app = angular.module('myApp', []);
						app.controller('formCtrl', function($scope) {
							$scope.master = {firstName: "John", lastName: "Doe"};
							$scope.reset = function() {
								$scope.user = angular.copy($scope.master);
							};
							$scope.reset();
						});
					</script>
		- Angular Validation
			- AngularJS offers client-side form validation.
				- AngularJS monitors the state of the form and input fields (input, textarea, select), and lets you notify the user about the current state.
				- AngularJS also holds information about whether they have been touched, or modified, or not.
				- You can use standard HTML5 attributes to validate input, or you can make your own validation functions.
				- Client-side validation cannot alone secure user input. Server side validation is also necessary.
			- Required
				- <form name="myForm">
						<input name="myInput" ng-model="myInput" required>
					</form>
					<p>The input's valid state is:</p>
					<h1>{{myForm.myInput.$valid}}</h1>
			- E-mail
				- <form name="myForm">
						<input name="myInput" ng-model="myInput" type="email">
					</form>
					<p>The input's valid state is:</p>
					<h1>{{myForm.myInput.$valid}}</h1>
			- Form State and Input State
				- AngularJS is constantly updating the state of both the form and the input fields.
				- Input fields have the following states:
					$untouched The field has not been touched yet
					$touched The field has been touched
					$pristine The field has not been modified yet
					$dirty The field has been modified
					$invalid The field content is not valid
					$valid The field content is valid
				- They are all properties of the input field, and are either true or false.
				- Forms have the following states:
					$pristine No fields have been modified yet
					$dirty One or more have been modified
					$invalid The form content is not valid
					$valid The form content is valid
					$submitted The form is submitted
				- They are all properties of the form, and are either true or false.
				- You can use these states to show meaningful messages to the user. Example, if a field is required, and the user leaves it blank, you should give the user a warning:
					- <input name="myName" ng-model="myName" required>
					- <span ng-show="myForm.myName.$touched && myForm.myName.$invalid">The name is required.</span>
			- CSS Classes
				- AngularJS adds CSS classes to forms and input fields depending on their states.
				- The following classes are added to, or removed from, input fields:
					ng-untouched The field has not been touched yet
					ng-touched The field has been touched
					ng-pristine The field has not been  modified yet
					ng-dirty The field has been modified
					ng-valid The field content is valid
					ng-invalid The field content is not valid
					ng-valid-key One key for each validation. Example: ng-valid-required, useful when there are more than one thing that must be validated
					ng-invalid-key Example: ng-invalid-required
				- The following classes are added to, or removed from, forms:
					ng-pristine No fields has not been modified yet
					ng-dirty One or more fields has been modified
					ng-valid The form content is valid
					ng-invalid The form content is not valid
					ng-valid-key One key for each validation. Example: ng-valid-required, useful when there are more than one thing that must be validated
					ng-invalid-key Example: ng-invalid-required
				- The classes are removed if the value they represent is false.
				- Add styles for these classes to give your application a better and more intuitive user interface.
				- <style>
						input.ng-invalid {
							background-color: pink;
						}
						input.ng-valid {
							background-color: lightgreen;
						}
					</style>
			- Custom Validation
				- To create your own validation function is a bit more tricky; You have to add a new directive to your application, and deal with the validation inside a function with certain specified arguments.
				- Create your own directive, containing a custom validation function, and refer to it by using my-directive.
				- The field will only be valid if the value contains the character "e":
				- <form name="myForm">
					<input name="myInput" ng-model="myInput" required my-directive>
					</form>

					<script>
					var app = angular.module('myApp', []);
					app.directive('myDirective', function() {
					  return {
						require: 'ngModel',
						link: function(scope, element, attr, mCtrl) {
						  function myValidation(value) {
							if (value.indexOf("e") > -1) {
							  mCtrl.$setValidity('charE', true);
							} else {
							  mCtrl.$setValidity('charE', false);
							}
							return value;
						  }
						  mCtrl.$parsers.push(myValidation);
						}
					  };
					});
					</script>
			- Validation Example
				- <!DOCTYPE html>
					<html>
						<script src="https://ajax.googleapis.com/ajax/libs/angularjs/1.6.4/angular.min.js"></script>
						<body>

							<h2>Validation Example</h2>

							<form  ng-app="myApp"  ng-controller="validateCtrl"
							name="myForm" novalidate>

								<p>Username:<br>
								  <input type="text" name="user" ng-model="user" required>
								  <span style="color:red" ng-show="myForm.user.$dirty && myForm.user.$invalid">
								  <span ng-show="myForm.user.$error.required">Username is required.</span>
								  </span>
								</p>

								<p>Email:<br>
								  <input type="email" name="email" ng-model="email" required>
								  <span style="color:red" ng-show="myForm.email.$dirty && myForm.email.$invalid">
								  <span ng-show="myForm.email.$error.required">Email is required.</span>
								  <span ng-show="myForm.email.$error.email">Invalid email address.</span>
								  </span>
								</p>

								<p>
								  <input type="submit"
								  ng-disabled="myForm.user.$dirty && myForm.user.$invalid ||
								  myForm.email.$dirty && myForm.email.$invalid">
								</p>

							</form>

							<script>
								var app = angular.module('myApp', []);
								app.controller('validateCtrl', function($scope) {
									$scope.user = 'John Doe';
									$scope.email = 'john.doe@gmail.com';
								});
							</script>

						</body>
					</html>
		- Angular API
			- API stands for Application Programming Interface.
			- AngularJS Global API
				- The AngularJS Global API is a set of global JavaScript functions for performing common tasks like:
					Comparing objects
					Iterating objects
					Converting data
				- The Global API functions are accessed using the angular object.
				- Below is a list of some common API functions:
					API					Description
					angular.lowercase()	Converts a string to lowercase
					angular.uppercase()	Converts a string to uppercase
					angular.isString()	Returns true if the reference is a string
					angular.isNumber()	Returns true if the reference is a number
				- angular.lowercase()
					- <div ng-app="myApp" ng-controller="myCtrl">
							<p>{{ x1 }}</p>
							<p>{{ x2 }}</p>
						</div>
						<script>
							var app = angular.module('myApp', []);
							app.controller('myCtrl', function($scope) {
							$scope.x1 = "JOHN";
							$scope.x2 = angular.lowercase($scope.x1);
							});
						</script>
		- Angular W3.CSS
			- JavaScript Code Explained
				Scope Properties	Used for
				$scope.fName		Model variable (user first name)
				$scope.lName		Model variable (user last name)
				$scope.passw1		Model variable (user password 1)
				$scope.passw2		Model variable (user password 2)
				$scope.users		Model variable (array of users)
				$scope.edit			Set to true when user clicks on 'Create user'.
				$scope.hideform		Set to true when user clicks on 'Edit' or 'Create user'.
				$scope.error		Set to true if passw1 not equal passw2
				$scope.incomplete	Set to true if any field is empty (length = 0)
				$scope.editUser		Sets model variables
				$scope.$watch		Watches model variables
				$scope.test			Tests model variables for errors and incompleteness
		- Angular Includes
			- AngularJS Includes
				- With AngularJS, you can include HTML content using the ng-include directive:
					- <body ng-app="">
							<div ng-include="'myFile.htm'"></div>
						</body>
			- Include AngularJS Code
				- myTable.htm:
					- <table>
							<tr ng-repeat="x in names">
								<td>{{ x.Name }}</td>
								<td>{{ x.Country }}</td>
							</tr>
						</table>
				- Include the file "myTable.htm" in your web page, and all AngularJS code will be executed, even the code inside the included file:
					- <body>
						<div ng-app="myApp" ng-controller="customersCtrl"> 
						  <div ng-include="'myTable.htm'"></div>
						</div>
						<script>
							var app = angular.module('myApp', []);
							app.controller('customersCtrl', function($scope, $http) {
								$http.get("customers.php").then(function (response) {
									$scope.names = response.data.records;
								});
							});
						</script>
			- Include Cross Domains
				- <body ng-app="myApp">
						<div ng-include="'https://tryit.w3schools.com/angular_include.php'"></div>
						<script>
							var app = angular.module('myApp', [])
							app.config(function($sceDelegateProvider) {
								$sceDelegateProvider.resourceUrlWhitelist([
									'https://tryit.w3schools.com/**'
								]);
							});
						</script>
					</body>
		- Angular Animations
			- What is an Animation?
				- An animation is when the transformation of an HTML element gives you an illusion of motion.
				- <body ng-app="ngAnimate">
						Hide the DIV: <input type="checkbox" ng-model="myCheck">
						<div ng-hide="myCheck"></div>
					</body>
			- What do I Need?
				- To make your applications ready for animations, you must include the AngularJS Animate library:
					- <script src="https://ajax.googleapis.com/ajax/libs/angularjs/1.6.4/angular-animate.js"></script>
				- Then you must refer to the ngAnimate module in your application:
					- <body ng-app="ngAnimate">
				- Or if your application has a name, add ngAnimate as a dependency in your application module:
					- <body ng-app="myApp">
							<h1>Hide the DIV: <input type="checkbox" ng-model="myCheck"></h1>
							<div ng-hide="myCheck"></div>
						<script>
							var app = angular.module('myApp', ['ngAnimate']);
						</script>
			- What Does ngAnimate Do?
				- The ngAnimate module adds and removes classes.
				- The ngAnimate module does not animate your HTML elements, but when ngAnimate notice certain events, like hide or show of an HTML element, the element gets some pre-defined classes which can be used to make animations.
				- The directives in AngularJS who add/remove classes are:
					ng-show
					ng-hide
					ng-class
					ng-view
					ng-include
					ng-repeat
					ng-if
					ng-switch
				- The ng-show and ng-hide directives adds or removes a ng-hide class value.
				- The other directives adds a ng-enter class value when they enter the DOM, and a ng-leave attribute when they are removed from the DOM.
				- The ng-repeat directive also adds a ng-move class value when the HTML element changes position.
				- In addition, during the animation, the HTML element will have a set of class values, which will be removed when the animation has finished. Example: the ng-hide directive will add these class values:
					ng-animate
					ng-hide-animate
					ng-hide-add (if the element will be hidden)
					ng-hide-remove (if the element will be showed)
					ng-hide-add-active (if the element will be hidden)
					ng-hide-remove-active (if the element will be showed)
			- Animations Using CSS
				- We can use CSS transitions or CSS animations to animate HTML elements. This tutorial will show you both.
				- To learn more about CSS Animation, study our CSS Transition Tutorial and our CSS Animation Tutorial.
			- CSS Transitions
				- CSS transitions allows you to change CSS property values smoothly, from one value to another, over a given duration:
					- <style>
							div {
								transition: all linear 0.5s;
								background-color: lightblue;
								height: 100px;
							}
							.ng-hide {
								height: 0;
							}
						</style>
			- CSS Animations
				- CSS Animations allows you to change CSS property values smoothly, from one value to another, over a given duration:
				- When the DIV element gets the .ng-hide class, the myChange animation will run, which will smoothly change the height from 100px to 0:
					- <style>
						@keyframes myChange {
							from {
								height: 100px;
							} to {
								height: 0;
							}
						}
						div {
							height: 100px;
							background-color: lightblue;
						}
						div.ng-hide {
							animation: 0.5s myChange;
						}
					</style>
		- Angular Routing
			- If you want to navigate to different pages in your application, but you also want the application to be a SPA (Single Page Application), with no page reloading, you can use the ngRoute module.
			- The ngRoute module routes your application to different pages without reloading the entire application.
			- <body ng-app="myApp">
					<p><a href="#/!">Main</a></p>
					<a href="#!red">Red</a>
					<a href="#!green">Green</a>
					<a href="#!blue">Blue</a>
					<div ng-view></div>
					<script>
						var app = angular.module("myApp", ["ngRoute"]);
						app.config(function($routeProvider) {
							$routeProvider
							.when("/", {
								templateUrl : "main.htm"
							})
							.when("/red", {
								templateUrl : "red.htm"
							})
							.when("/green", {
								templateUrl : "green.htm"
							})
							.when("/blue", {
								templateUrl : "blue.htm"
							});
						});
					</script>
				</body>
			- What do I Need?
				- To make your applications ready for routing, you must include the AngularJS Route module:
					- <script src="https://ajax.googleapis.com/ajax/libs/angularjs/1.6.4/angular-route.js"></script>
				- Then you must add the ngRoute as a dependency in the application module::
					- var app = angular.module("myApp", ["ngRoute"]);
				- Now your application has access to the route module, which provides the $routeProvider.
				- Use the $routeProvider to configure different routes in your application:
					- app.config(function($routeProvider) {
						  $routeProvider
						  .when("/", {
							templateUrl : "main.htm"
						  })
						  .when("/red", {
							templateUrl : "red.htm"
						  })
						  .when("/green", {
							templateUrl : "green.htm"
						  })
						  .when("/blue", {
							templateUrl : "blue.htm"
						  });
						});
			- Where Does it Go?
				- Your application needs a container to put the content provided by the routing.
				- This container is the ng-view directive.
				- There are three different ways to include the ng-view directive in your application:
					- <div ng-view></div>
					- <ng-view></ng-view>
					- <div class="ng-view"></div>
			- $routeProvider
				- With the $routeProvider you can define what page to display when a user clicks a link.
					- var app = angular.module("myApp", ["ngRoute"]);
						app.config(function($routeProvider) {
							$routeProvider
							.when("/", {
								templateUrl : "main.htm"
							})
							.when("/london", {
								templateUrl : "london.htm"
							})
							.when("/paris", {
								templateUrl : "paris.htm"
							});
						});
				- Define the $routeProvider using the config method of your application. Work registered in the config method will be performed when the application is loading.
			- Controllers
				- With the $routeProvider you can also define a controller for each "view".
				- var app = angular.module("myApp", ["ngRoute"]);
					app.config(function($routeProvider) {
						$routeProvider
						.when("/", {
							templateUrl : "main.htm"
						})
						.when("/london", {
							templateUrl : "london.htm",
							controller : "londonCtrl"
						})
						.when("/paris", {
							templateUrl : "paris.htm",
							controller : "parisCtrl"
						});
					});
					app.controller("londonCtrl", function ($scope) {
						$scope.msg = "I love London";
					});
					app.controller("parisCtrl", function ($scope) {
						$scope.msg = "I love Paris";
					});
				- london.htm
					<h1>London</h1>
					<h3>London is the capital city of England.</h3>
					<p>It is the most populous city in the United Kingdom, with a metropolitan area of over 13 million inhabitants.</p>
					<p>{{msg}}</p>
				- paris.htm
					<h1>Paris</h1>
					<h3>Paris is the capital city of France.</h3>
					<p>The Paris area is one of the largest population centers in Europe, with more than 12 million inhabitants.</p>
					<p>{{msg}}</p>
			- Template
				- In the previous examples we have used the templateUrl property in the $routeProvider.when method.
				- You can also use the template property, which allows you to write HTML directly in the property value, and not refer to a page.
					- var app = angular.module("myApp", ["ngRoute"]);
						app.config(function($routeProvider) {
							$routeProvider
							.when("/", {
								template : "<h1>Main</h1><p>Click on the links to change this content</p>"
							})
							.when("/banana", {
								template : "<h1>Banana</h1><p>Bananas contain around 75% water.</p>"
							})
							.when("/tomato", {
								template : "<h1>Tomato</h1><p>Tomatoes contain around 95% water.</p>"
							});
						});
			- The otherwise method
				- In the previous examples we have used the when method of the $routeProvider.
				- You can also use the otherwise method, which is the default route when none of the others get a match.
				- If neither the "Banana" nor the "Tomato" link has been clicked, let them know:
					- var app = angular.module("myApp", ["ngRoute"]);
						app.config(function($routeProvider) {
						   $routeProvider
							.when("/banana", {
								template : "<h1>Banana</h1><p>Bananas contain around 75% water.</p>"
							})
							.when("/tomato", {
								template : "<h1>Tomato</h1><p>Tomatoes contain around 95% water.</p>"
							})
							.otherwise({
								template : "<h1>None</h1><p>Nothing has been selected</p>"
							});
						});
		- Angular Application
			- Make a Shopping List
				- Lets use some of the AngularJS features to make a shopping list, where you can add or remove items:
				- <link rel="stylesheet" href="https://www.w3schools.com/w3css/4/w3.css">
					- <!DOCTYPE html>
						<html>
							<script src="https://ajax.googleapis.com/ajax/libs/angularjs/1.6.4/angular.min.js"></script>
							<link rel="stylesheet" href="/w3css/4/w3.css">
							<body>

							<script>
								var app = angular.module("myShoppingList", []); 
								app.controller("myCtrl", function($scope) {
									$scope.products = ["Milk", "Bread", "Cheese"];
									$scope.addItem = function () {
										$scope.errortext = "";
										if (!$scope.addMe) {return;}
										if ($scope.products.indexOf($scope.addMe) == -1) {
											$scope.products.push($scope.addMe);
										} else {
											$scope.errortext = "The item is already in your shopping list.";
										}
									}
									$scope.removeItem = function (x) {
										$scope.errortext = "";    
										$scope.products.splice(x, 1);
									}
								});
							</script>

							<div ng-app="myShoppingList" ng-cloak ng-controller="myCtrl" class="w3-card-2 w3-margin" style="max-width:400px;">
							  <header class="w3-container w3-light-grey w3-padding-16">
								<h3>My Shopping List</h3>
							  </header>
							  <ul class="w3-ul">
								<li ng-repeat="x in products" class="w3-padding-16">{{x}}<span ng-click="removeItem($index)" style="cursor:pointer;" class="w3-right w3-margin-right">×</span></li>
							  </ul>
							  <div class="w3-container w3-light-grey w3-padding-16">
								<div class="w3-row w3-margin-top">
								  <div class="w3-col s10">
									<input placeholder="Add shopping items here" ng-model="addMe" class="w3-input w3-border w3-padding">
								  </div>
								  <div class="w3-col s2">
									<button ng-click="addItem()" class="w3-btn w3-padding w3-green">Add</button>
								  </div>
								</div>
								<p class="w3-text-red">{{errortext}}</p>
							  </div>
							</div>

							</body>
						</html>

		Examples
		- Angular Examples

		Reference
		- Angular Reference