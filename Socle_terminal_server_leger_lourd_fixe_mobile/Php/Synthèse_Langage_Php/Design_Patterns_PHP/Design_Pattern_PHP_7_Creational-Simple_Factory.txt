> Simple Factory
	- 



// ------------------------------------------------
http://designpatternsphp.readthedocs.io/en/latest/Creational/SimpleFactory/README.html


1.7. Simple Factory
1.7.1. Purpose

SimpleFactory is a simple factory pattern.

It differs from the static factory because it is NOT static and as you know: static => global => evil!

Therefore, you can have multiple factories, differently parametrized, you can subclass it and you can mock-up it.
1.7.2. UML Diagram
Alt SimpleFactory UML Diagram
1.7.3. Code

You can also find these code on GitHub

SimpleFactory.php

<?php

namespace DesignPatterns\Creational\SimpleFactory;

/**
 * class SimpleFactory.
 */
class SimpleFactory
{
    /**
     * @var array
     */
    protected $typeList;

    /**
     * You can imagine to inject your own type list or merge with
     * the default ones...
     */
    public function __construct()
    {
        $this->typeList = array(
            'bicycle' => __NAMESPACE__.'\Bicycle',
            'other' => __NAMESPACE__.'\Scooter',
        );
    }

    /**
     * Creates a vehicle.
     *
     * @param string $type a known type key
     *
     * @throws \InvalidArgumentException
     *
     * @return VehicleInterface a new instance of VehicleInterface
     */
    public function createVehicle($type)
    {
        if (!array_key_exists($type, $this->typeList)) {
            throw new \InvalidArgumentException("$type is not valid vehicle");
        }
        $className = $this->typeList[$type];

        return new $className();
    }
}

VehicleInterface.php

<?php

namespace DesignPatterns\Creational\SimpleFactory;

/**
 * VehicleInterface is a contract for a vehicle.
 */
interface VehicleInterface
{
    /**
     * @param mixed $destination
     *
     * @return mixed
     */
    public function driveTo($destination);
}

Bicycle.php

<?php

namespace DesignPatterns\Creational\SimpleFactory;

/**
 * Bicycle is a bicycle.
 */
class Bicycle implements VehicleInterface
{
    /**
     * @param mixed $destination
     *
     * @return mixed|void
     */
    public function driveTo($destination)
    {
    }
}

Scooter.php

<?php

namespace DesignPatterns\Creational\SimpleFactory;

/**
 * Scooter is a Scooter.
 */
class Scooter implements VehicleInterface
{
    /**
     * @param mixed $destination
     */
    public function driveTo($destination)
    {
    }
}

1.7.4. Usage

$factory = new SimpleFactory();
$bicycle = $factory->createVehicle('bicycle');
$bicycle->driveTo('Paris');

1.7.5. Test

Tests/SimpleFactoryTest.php

<?php

namespace DesignPatterns\Creational\SimpleFactory\Tests;

use DesignPatterns\Creational\SimpleFactory\SimpleFactory;

/**
 * SimpleFactoryTest tests the Simple Factory pattern.
 */
class SimpleFactoryTest extends \PHPUnit_Framework_TestCase
{
    protected $factory;

    protected function setUp()
    {
        $this->factory = new SimpleFactory();
    }

    public function getType()
    {
        return array(
            array('bicycle'),
            array('other'),
        );
    }

    /**
     * @dataProvider getType
     */
    public function testCreation($type)
    {
        $obj = $this->factory->createVehicle($type);
        $this->assertInstanceOf('DesignPatterns\Creational\SimpleFactory\VehicleInterface', $obj);
    }

    /**
     * @expectedException \InvalidArgumentException
     */
    public function testBadType()
    {
        $this->factory->createVehicle('car');
    }
}













