> Registry
- 



// ------------------------------------------------
http://designpatternsphp.readthedocs.io/en/latest/Structural/Registry/README.html

2.11. Registry
2.11.1. Purpose

To implement a central storage for objects often used throughout the application, is typically implemented using an abstract class with only static methods (or using the Singleton pattern)
2.11.2. Examples

    Zend Framework 1: Zend_Registry holds the applicationâ€™s logger object, front controller etc.
    Yii Framework: CWebApplication holds all the application components, such as CWebUser, CUrlManager, etc.

2.11.3. UML Diagram
Alt Registry UML Diagram
2.11.4. Code

You can also find these code on GitHub

Registry.php

<?php

namespace DesignPatterns\Structural\Registry;

/**
 * class Registry.
 */
abstract class Registry
{
    const LOGGER = 'logger';

    /**
     * @var array
     */
    protected static $storedValues = array();

    /**
     * sets a value.
     *
     * @param string $key
     * @param mixed  $value
     *
     * @static
     *
     * @return void
     */
    public static function set($key, $value)
    {
        self::$storedValues[$key] = $value;
    }

    /**
     * gets a value from the registry.
     *
     * @param string $key
     *
     * @static
     *
     * @return mixed
     */
    public static function get($key)
    {
        return self::$storedValues[$key];
    }

    // typically there would be methods to check if a key has already been registered and so on ...
}

2.11.5. Test

Tests/RegistryTest.php

<?php

namespace DesignPatterns\Structural\Registry\Tests;

use DesignPatterns\Structural\Registry\Registry;

class RegistryTest extends \PHPUnit_Framework_TestCase
{
    public function testSetAndGetLogger()
    {
        $key = Registry::LOGGER;
        $object = new \StdClass();

        Registry::set($key, $object);
        $actual = Registry::get($key);

        $this->assertEquals($object, $actual);
        $this->assertInstanceOf('StdClass', $actual);
    }
}




// ------------------------------------------------